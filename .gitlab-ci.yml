before_script:
  - echo "Job $CI_JOB_NAME start"
  - hostname; pwd

after_script:
  - echo "Step $CI_JOB_NAME finish"

stages:
  - lint
  - test
  - docs
  - create-release
  - .post

lint:
  image: node:12
  stage: lint
  except:
    refs:
      - master
      - tags
    variables:
      - $CI_COMMIT_MESSAGE =~ /^\[Registry Release\]*/i
  script:
    - yarn install
    - yarn run lint

test:
  image: node:12
  stage: test
  except:
    refs:
      - master
      - tags
    variables:
      - $CI_COMMIT_MESSAGE =~ /^\[Registry Release\]*/i
  script:
    - yarn install
    - yarn run test:unit
    - yarn run test:integration

docs_job:
  image: node:12
  stage: docs
  except:
    refs:
      - master
      - tags
    variables:
      - $CI_COMMIT_MESSAGE =~ /^\[Registry Release\]*/i
  only:
    variables:
      - $DOCUMENTATION_TYPE =~ "SWAGGER"
  script:
    - echo "Generate public resources at GitLab Pages"
    - yarn install
    - yarn run build
    - yarn run generate:dto:svg
    - yarn run generate:open-api-schema
    - yarn run generate:redoc
  artifacts:
    paths:
      - public

create_pre_release_job:
  image: node:12
  stage: create-release
  except:
    refs:
      - master
      - tags
    variables:
      - $CI_COMMIT_MESSAGE =~ /^\[Registry Release\]*/i
  script:
    - eval `ssh-agent -s`
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add - > /dev/null # add ssh key
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - yarn install
    - yarn run build
    - echo "Incrementing version"
    - yarn version --prerelease --preid=$CI_COMMIT_REF_SLUG --no-git-tag-version
    - PROJECT_VERSION=$(node -p "require('./package.json').version")
    - echo $PROJECT_VERSION > VERSION
    - git remote set-url origin git@${CI_SERVER_HOST}:${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}.git
    - git config --local user.name "${CI_USERNAME}"
    - git config --local user.email "${CI_EMAIL}"
    - git add package.json VERSION ./public && git commit -m '[Registry Release]' || exit 1
    - git push origin HEAD:$CI_COMMIT_REF_NAME || exit 1
    - echo "//${NPM_REGISTRY_URL}/:_authToken=${NPM_AUTH_TOKEN}" > ~/.npmrc
    - yarn publish --registry http://${NPM_REGISTRY_URL} --tag beta-$CI_COMMIT_REF_SLUG

create_release_job:
  image: node:12
  stage: create-release
  when: manual
  only:
    refs:
      - master
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /^\[Registry Release\]*/i
  script:
    - eval `ssh-agent -s`
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add - > /dev/null # add ssh key
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - yarn install
    - yarn run build
    - echo "Incrementing version"
    - yarn version --minor --no-git-tag-version
    - PROJECT_VERSION=$(node -p "require('./package.json').version")
    - echo $PROJECT_VERSION > VERSION
    - echo "Generating changelog"
    - yarn run changelog
    - git remote set-url origin git@${CI_SERVER_HOST}:${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}.git
    - git config --local user.name "${CI_USERNAME}"
    - git config --local user.email "${CI_EMAIL}"
    - git add package.json VERSION CHANGELOG.md && git commit -m '[Registry Release]' || exit 1
    - git tag $PROJECT_VERSION || exit 1
    - git push origin HEAD:$CI_COMMIT_REF_NAME --tags || exit 1
    - echo "//${NPM_REGISTRY_URL}/:_authToken=${NPM_AUTH_TOKEN}" > ~/.npmrc
    - yarn publish --registry http://${NPM_REGISTRY_URL} --tag latest --ignore-scripts

.post:
  script:
    - echo "Pipeline is done"
